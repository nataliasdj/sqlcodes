-- https://www.udemy.com/course/complete-microsoft-sql-server-beginner-expert/learn/lecture/22157326#overview
-- Use AdventureWorks2022
-- 1. filter based on condition - it uses WHERE
-- 2. alias to name a new column (AS)
-- 3. order of operation is not as per lines but as per 
		--FROM->WHERE->GROUP BY -> HAVING -> SELECT -> ORDER BY
-- 4. if you wanna compact it use IN (for or)
-- 5. between literally between ex 1 to 50 use BETWEEN 1 AND 50
-- 6. if you wanna match a particular pattern - use LIKE and usually helps with %
-- 7. ORDER BY for sorting ascending or descending
-- 8. GROUP BY for ex. if salesorder A have multiple entries, u can just join them together
-- 9. HAVING is like atm, replaceing WHERE with an agregate function + the order in which you have to write the keywords is
		-- SELECT -> FROM -> WHERE -> GROUP BY -> HAVING -> ORDER BY
		The HAVING clause is used with aggregate functions like COUNT, etc which require grouping - so it must have GROUP BY
-- 10. subquery
-- 11. UNION & UNION ALL -combine row/record from multiple tables to a single select - 
--		UNION remove duplicate & datatype must be similar
--		UNION ALL doesnt remove duplicate
-- 12. JOIN - combine multiple column (also JOIN and INNER JOIN) is same
-- 13. LEFT JOIN = LEFT OUTER JOIN & RIGHT JOIN = RIGHT OUTER JOIN, the outer is just literally the same
-- 14. FULL JOIN - combination of left and right literally, left on top right on bottom
-- 15. Create table
-- 16. INSERT
-- 17. UPDATE & Alter - if alter - change struct of table or aka 
--		add or delete column/list of column and change datatype
-- 18. DELETE - delete record/row from the table (use the select * from pt 16 if you wanna see table)


SELECT DISTINCT BusinessEntityID,JobTitle --if want no duplicates
FROM HumanResources.Employee
--WHERE JobTitle = 'Research and Development Manager'
WHERE BusinessEntityID < 3;

SELECT SubTotal,TaxAmt, SubTotal + TaxAmt AS SubTotalWithTaxAmt
FROM Purchasing.PurchaseOrderHeader;

SELECT SubTotal,TaxAmt, SubTotal / TaxAmt AS divisiontotaldividtax
FROM Purchasing.PurchaseOrderHeader
WHERE TaxAmt > 0; --incase arithmetic x / 0 thing

--so for point 3, this does not work
SELECT SubTotal,TaxAmt, SubTotal / TaxAmt AS divisiontotaldividtax
FROM Purchasing.PurchaseOrderHeader
--WHERE divisiontotaldividtax > 50; -- fail bcs of order of operation
-- but this does
WHERE  SubTotal / TaxAmt > 50; 

SELECT FirstName,MiddleName,LastName, FirstName + ' '+MiddleName + ' ' +LastName AS FullName
FROM Person.Person
WHERE MiddleName IS NOT NULL;

--POINT 4
SELECT *
FROM HumanResources.Employee
--WHERE JobTitle = 'Design Engineer' OR JobTitle = 'Research and Development Manager'
--WHERE MaritalStatus = 'S' AND Gender = 'F';
--WHERE JobTitle IN ('Design Engineer','Research and Development Manager');
WHERE BusinessEntityID IN (1,5,10,15)

--POINT 5
SELECT *
FROM HumanResources.Employee
WHERE BusinessEntityID BETWEEN 1 AND 15

-- Point 6
SELECT *
FROM Person.StateProvince
--WHERE Name LIKE 'Ala%'; --if u want some name starting with ala
--WHERE Name LIKE '%o'; --name ending with o
WHERE Name LIKE 'Al____'; --each _ represents 1 letter= 4 underscore means want a name that is 6 characters (added with the 2 AL)

--point 7
SELECT City, PostalCode
From Person.Address
ORDER BY City DESC; --by default ascending just del the DESC

SELECT FirstName,LastName, MiddleName
FROM Person.Person
WHERE MiddleName IS NOT NULL
ORDER BY FirstName DESC, LastName ASC; --it is still their name cuman i guess group
-- so bascially it orders the firstname and in all the ex. ZOE, the lastname will be ordered again in the ZOE firstname group

--Point 8 - better idea if u execute the first 2 lines, then execute all 3
SELECT SalesOrderId, SUM(UnitPrice) AS TOTALUNITPRICEPERSALES
FROM sales.SalesOrderDetail
GROUP BY SalesOrderID
--there are more functions too, there's AVG(), COUNT() how much of that item, MAX(),MIN()

--SELECT FirstName,MiddleName,LastName, FirstName + ' '+MiddleName + ' ' +LastName AS FullName
--Also concat can ignore NULL
SELECT FirstName,MiddleName,LastName, 
	CONCAT(FirstName, ' ', MiddleName, ' ',LastName) AS FullName
FROM Person.Person

--SELECT FirstName, LEN(FirstName) AS LENOFNAME
--SELECT FirstName, LEFT(FirstName,2) AS Extracted--extract fixed num of char
--can do RIGHT as well to extract
SELECT FirstName, SUBSTRING(FirstName,3,4) AS Extract_substring -- no 0 index ya, extract from 3rd position to length of 4
FROM Person.Person;

-- MONTH() and YEAR() is also possible
SELECT SalesOrderID,OrderDate, DAY(OrderDate) AS theDay --extract day part of the date
FROM Sales.SalesOrderHeader;

--extract system date without timezone
SELECT CURRENT_TIMESTAMP;

-- Point 9
SELECT SalesOrderId, SUM(UnitPrice) AS TOTALUNITPRICEPERSALES -- this sum is called agregate func
FROM sales.SalesOrderDetail
WHERE SalesOrderID > 50000
--you cant put WHERE SUM(UnitPrice) > 500 -- aka where and agregate func cant be in same line - it must be in a subquery or use HAVING
GROUP BY SalesOrderID
HAVING SUM(UnitPrice) > 500 -- HAVING must be below GROUP BY
ORDER BY SalesOrderID DESC;

--  POINT 10 Subquery
-- rn the execute the first 2, it will give 2 diff tables where PurchaseOrderID is present in both table
SELECT * FROM Purchasing.PurchaseOrderHeader;
SELECT * FROM Purchasing.PurchaseOrderDetail WHERE PurchaseOrderDetailID > 5;

SELECT PurchaseOrderID, EmployeeID FROM Purchasing.PurchaseOrderHeader
WHERE PurchaseOrderID IN
(
 SELECT PurchaseOrderID FROM Purchasing.PurchaseOrderDetail WHERE PurchaseOrderDetailID > 5 -- cannot use * (IN expects 1 column)
)
--basically means if puchaseorderdetailid > 5 in the 2nd table, spit out the purchaseorderid and employeeid from table 1


SELECT PurchaseOrderID, EmployeeID FROM Purchasing.PurchaseOrderHeader
WHERE PurchaseOrderID IN
(
 SELECT PurchaseOrderID FROM Purchasing.PurchaseOrderDetail WHERE PurchaseOrderDetailID = 5 -- cannot use * (IN expects 1 column)
)
--in relation, so if you just execute the inner query, it will give 1 purchaseorderid that is 4,
-- so if you do 
SELECT PurchaseOrderID, EmployeeID FROM Purchasing.PurchaseOrderHeader
WHERE PurchaseOrderID = 4

--or you can also do instead of IN
SELECT PurchaseOrderID, EmployeeID FROM Purchasing.PurchaseOrderHeader
WHERE PurchaseOrderID =
(
 SELECT PurchaseOrderID FROM Purchasing.PurchaseOrderDetail WHERE PurchaseOrderDetailID = 5 -- cannot use * (IN expects 1 column)
)
-- END OF SUBQUERY

-- Point 11
-- the customerID will also combine with businessentityID, into 1 column, the title will be businessentityid
-- run first 3 then run the rest without the first 3
SELECT BusinessEntityID FROM HumanResources.Employee
SELECT BusinessEntityID FROM Person.Person
SELECT CustomerID FROM Sales.Customer

SELECT BusinessEntityID FROM HumanResources.Employee
  UNION ALL
SELECT BusinessEntityID FROM Person.Person
  UNION ALL
SELECT CustomerID FROM Sales.Customer;

-- Point 12, 
--the purchaseOrderID should match
SELECT PurchaseOrderID,PurchaseOrderDetailID FROM Purchasing.PurchaseOrderDetail
SELECT PurchaseOrderID,OrderDate FROM Purchasing.PurchaseOrderHeader

SELECT pod.PurchaseOrderID,pod.PurchaseOrderDetailID, poh.OrderDate
FROM Purchasing.PurchaseOrderDetail pod --pod is the alias (so u know which table u get from)
  INNER JOIN --or JOIN is same
Purchasing.PurchaseOrderHeader poh
ON pod.PurchaseOrderID = poh.PurchaseOrderID -- all the matching where the one in POD = POH purchaseorderid

-- Point 13
SELECT * FROM Person.Person
SELECT * FROM Person.BusinessEntityAddress

SELECT p.BusinessEntityID, p.FirstName, p.LastName, bus.BusinessEntityID, bus.AddressID
FROM Person.Person p
  INNER JOIN
Person.BusinessEntityAddress bus
ON p.BusinessEntityID = bus.BusinessEntityID

-- if you want all the left table (irrespective if match or no) and only the matching right table
-- if no match then the right table is null - try execute the inner join up if you dont understand
SELECT p.BusinessEntityID, p.FirstName, p.LastName, bus.BusinessEntityID, bus.AddressID
FROM Person.Person p --left table
  LEFT JOIN
Person.BusinessEntityAddress bus --right
ON p.BusinessEntityID = bus.BusinessEntityID

--same but opposite and somehow the result, the matching are at the top and non matching - aka the NULL is bottom
-- prolly cuz of null in the first column
SELECT p.BusinessEntityID, p.FirstName, p.LastName, bus.BusinessEntityID, bus.AddressID
FROM Person.Person p --left table
  RIGHT JOIN
Person.BusinessEntityAddress bus --right
ON p.BusinessEntityID = bus.BusinessEntityID

-- has both left and right join together
SELECT p.BusinessEntityID, p.FirstName, p.LastName, bus.BusinessEntityID, bus.AddressID
FROM Person.Person p --left table
FULL OUTER JOIN
Person.BusinessEntityAddress bus --right
ON p.BusinessEntityID = bus.BusinessEntityID

-- Point 15
--create empty database
CREATE DATABASE Covid19; --execute and then refresh and look at your databases
--not yet any user table
--CREATE TABLE TableName (col1 datatype1, col2 datatype2,...) -- table stmnt syntax
CREATE TABLE covidStats -- for this to work need to go to Covid19 instead of master
(covidID INT IDENTITY,
covidDate datetime, 
dailyConfirmedCases INT, 
dailyDeaths smallint,
country varchar(25), 
covidFlag bit, -- if no mistaken it means if yes have covid in country or no
totalLoss Money
); --identity auto increment field, look at data type

-- Point 16 INSERT - remember dont execute all the time, if continue insert then continue to add
SELECT * FROM dbo.covidStats
--INSERT INTO TableName VALUES (List of value);--insert syntax
--INSERT INTO TableName(list of column) VALUES (List of values) --if only some column
INSERT INTO dbo.covidStats VALUES('4/25/2020',1000,10,'USA',1,10000000); --no need covidid since identity
INSERT INTO dbo.covidStats(coviddate,country) VALUES ('4/25/2020','Tuvalu');-- cannot pass for covidid actually
--if want multiple records in a single line
INSERT INTO dbo.covidStats(covidDate,dailyConfirmedCases,dailyDeaths, country, covidFlag,totalLoss)
VALUES
('4/25/2020',800,6,'Brazil',1,500000),
('4/25/2020',750,5,'Russia',1,550000),
('4/25/2020',0,0,'Palau',1,5000);

-- Point 17 Update & ALTER
--UPDATE TableName SET col1=val, col2 = val2,.... WHERE Condition; --syntax, if no where then will update all
UPDATE dbo.covidStats SET covidFlag=0, totalLoss = 100
WHERE covidid = 2; 

ALTER TABLE covidStats -- add continent table
ADD continent char(12);

ALTER TABLE covidStats
ALTER Column continent varchar(15); --change datatype

ALTER TABLE covidStats -- delete the continent column
DROP Column continent;

-- Point 18 DELETE
DELETE FROM covidstats WHERE country = 'Brazil' AND covidFlag = 1; -- deletes the row that meets this condition
DELETE TOP(2) FROM covidStats --delete top 2 row of covidstats
DELETE TOP(10) PERCENT FROM covidStats--delete top 10 percent row from covidstats
--DELETE FROM covidstats -- deletes everything of covidstats

DROP TABLE covidStats -- literally deleted the whole table


